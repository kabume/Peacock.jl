var documenterSearchIndex = {"docs":
[{"location":"reference/#reference","page":"Technical reference","title":"Technical reference","text":"","category":"section"},{"location":"reference/#Public-interface","page":"Technical reference","title":"Public interface","text":"","category":"section"},{"location":"reference/","page":"Technical reference","title":"Technical reference","text":"Modules = [Peacock]\nPrivate = false","category":"page"},{"location":"reference/#Peacock.BrillouinZoneCoordinate","page":"Technical reference","title":"Peacock.BrillouinZoneCoordinate","text":"BrillouinZoneCoordinate(p::Float64, q::Float64, label::String=\"\")\n\nA labelled coordinate in the Brillouin zone.\n\nThe arguments p and q are the coefficients of reciprocal lattice vectors b1 and b2. The k-space coordinate, k = p * b1 + q * b2, is generated by get_k(coord::BrillouinZoneCoordinate, basis::PlaneWaveBasis). For example, BrillouinZoneCoordinate(0.5,0) is on the edge of the first Brillouin zone.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Peacock.Geometry","page":"Technical reference","title":"Peacock.Geometry","text":"2D geometry defined in real space.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Peacock.Geometry-Tuple{Function,Function,Array{#s18,1} where #s18<:Real,Array{#s19,1} where #s19<:Real,Real,Real}","page":"Technical reference","title":"Peacock.Geometry","text":"Geometry(epf::Function, muf::Function, a1::Array{<:Real,1}, a2::Array{<:Real,1}, d1::Real, d2::Real)\n\nGenerate geometry with permittivity epf(x,y) and permeability muf(x,y).\n\nThe real space lattice vectors, a1 and a2, define the unit cell. The grid resolution along each lattice vector is d1 and d2, respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.Geometry-Tuple{Function,Function,Real,Real,Real,Real}","page":"Technical reference","title":"Peacock.Geometry","text":"Geometry(epf::Function, muf::Function, a1::Array{<:Real,1}, a2::Array{<:Real,1}, d1::Real, d2::Real)\n\nGenerate geometry with permittivity epf(x,y) and permeability muf(x,y).\n\nThe real space lattice vectors are assumed to have unit length and are at angles a1_deg and a2_deg counter-clockwise from the x-axis. The grid resolution along each lattice vector is d1 and d2, respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.HilbertSpace-Tuple{Array{Mode,1}}","page":"Technical reference","title":"Peacock.HilbertSpace","text":"HilbertSpace(modes::Array{Mode,1})\n\nReturns the Hilbert space spanned by the modes.\n\nThe data of the Hilbert space is guaranteed to be orthonormal under the weighting of the modes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.Mode","page":"Technical reference","title":"Peacock.Mode","text":"Mode(k0, frequency, data, weighting, basis, label)\n\nEigenmode of a photonic crystal expressed on a plane-wave basis with a weighted inner product.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Peacock.Solver-Tuple{Geometry,Int64,Int64}","page":"Technical reference","title":"Peacock.Solver","text":"Solver(geometry::Geometry, cutoff_b1::Int, cutoff_b2::Int)\n\nApproximate the geometry using a basis of plane waves truncated in a rhombus.\n\nThe rhombus has lengths cutoff_b1 and cutoff_b2 in the b1 and b2 directions, respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.Solver-Tuple{Geometry,Int64}","page":"Technical reference","title":"Peacock.Solver","text":"Solver(geometry::Geometry, cutoff::Int)\n\nApproximate the geometry using a basis of plane waves truncated in a circle.\n\nThe circle has a diameter of cutoff Brillouin zones. Increasing the cutoff will increase the number of plane waves leading to a more accurate solution. It is assumed that norm(b1) == norm(b2).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.get_field-Tuple{AbstractArray{#s37,1} where #s37<:Complex,Peacock.PlaneWaveBasis}","page":"Technical reference","title":"Peacock.get_field","text":"get_field(data::AbstractVector{<:Complex}, basis::PlaneWaveBasis;\n                    k0=[0,0], t1s=-0.5:0.01:0.5, t2s=-0.5:0.01:0.5)\n\nConvert the data from a PlaneWaveBasis to a real space grid.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.plot_band_diagram-Tuple{Function,Any}","page":"Technical reference","title":"Peacock.plot_band_diagram","text":"plot_band_diagram(my_solve::Function, ks, <keyword arguments>)\n\nPlot the bands generated by my_solve(k) along ks.\n\nKeyword arguments\n\ndk=nothing: maximum distance between points\nlabels=[]: overwrite the labels for each k in ks\nbands=(:): indices of the bands to plot\nfrequency_scale=1: rescales the frequencies before plotting\ncolor=\"k\": color of the bands\nmarkersize=nothing: overwrite the size of each point\nshow_vlines=true: plot vertical lines at each k in ks\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.plot_band_diagram-Tuple{Solver,Any,Peacock.Polarisation}","page":"Technical reference","title":"Peacock.plot_band_diagram","text":"plot_band_diagram(solver::Solver, ks, polarisation::Polarisation, <keyword arguments>)\n\nPlot the bands generated by solve(solver, k, polarisation) along ks.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.plot_wilson_loop_winding-Tuple{Solver,Any,Any,AbstractArray{#s45,1} where #s45<:Int64}","page":"Technical reference","title":"Peacock.plot_wilson_loop_winding","text":"plot_wilson_loop_winding(solver::Solver, ks, polarisation, bands::AbstractVector{<:Int}, <keyword arguments>)\n\nPerform a series of Wilson loops along ks, and plot the spectra on a band diagram.\n\nKeyword arguments\n\ndk_outer=nothing: maximum distance between each loop (resolution of the scan)\ndk_inner: maximum distance between points along a loop (resolution of the loop)\nlabels=[]: overwrite the labels for each k in ks\ndelta_brillouin_zone=BrillouinZoneCoordinate(0,1): each Wilson loop starts at and finishes in at the same k in different Brillouin zones\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.solve-Tuple{Solver,AbstractArray{#s13,1} where #s13<:Real,Peacock.Polarisation}","page":"Technical reference","title":"Peacock.solve","text":"solve(solver::Solver, k::AbstractVector{<:Real}, polarisation::Polarisation; bands=:)\n\nCalculate the eigenmodes of a photonic crystal at position k in reciprocal space.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PyPlot.plot-Tuple{Geometry}","page":"Technical reference","title":"PyPlot.plot","text":"plot(geometry::Geometry)\n\nPlot the permittivity and permeability of the geometry in real space.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PyPlot.plot-Tuple{Mode}","page":"Technical reference","title":"PyPlot.plot","text":"plot(mode::Mode, [bloch_phase=true])\n\nPlot the mode in real space.\n\nTo plot only the cell-periodic part of the Bloch wave, set bloch_phase=false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PyPlot.plot-Tuple{Solver}","page":"Technical reference","title":"PyPlot.plot","text":"plot(solver::Solver)\n\nPlot the representation of the solver's geometry in real space.\n\nThe solver approximates the geometry using a truncated basis of plane waves, so plot(solver) lets us judge how accurately the geometry is represented.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Private-interface","page":"Technical reference","title":"Private interface","text":"","category":"section"},{"location":"reference/","page":"Technical reference","title":"Technical reference","text":"!!! note \"The Peacock.jl namespace\" The following objects are used internally, and aren't exported to the global namespace. However, they may be useful for more advanced users, in which case you should use Peacock.[name] to access these.","category":"page"},{"location":"reference/","page":"Technical reference","title":"Technical reference","text":"Modules = [Peacock]\nPublic = false","category":"page"},{"location":"reference/#Peacock.DiagonalMatrix","page":"Technical reference","title":"Peacock.DiagonalMatrix","text":"A sparse diagonal matrix that can be used in left division (D \\ X)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Peacock.PlaneWaveBasis-Tuple{Geometry,Int64,Int64}","page":"Technical reference","title":"Peacock.PlaneWaveBasis","text":"Solver(geometry::Geometry, cutoff_b1::Int, cutoff_b2::Int)\n\nApproximate the geometry using a basis of plane waves truncated in a rhombus.\n\nThe rhombus has lengths cutoff_b1 and cutoff_b2 in the b1 and b2 directions, respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.PlaneWaveBasis-Tuple{Geometry,Int64}","page":"Technical reference","title":"Peacock.PlaneWaveBasis","text":"PlaneWaveBasis(geometry::Geometry, cutoff::Int)\n\nApproximate a basis of plane waves truncated in a circle.\n\nThe circle has a diameter of cutoff Brillouin zones. Increasing the cutoff will increase the number of plane waves leading to a more accurate solution. It is assumed that norm(b1) == norm(b2).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.Polarisation","page":"Technical reference","title":"Peacock.Polarisation","text":"Transverse electric (TE) or transverse magnetic (TM) polarisation.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Peacock.as_to_bs-Tuple{Any,Any}","page":"Technical reference","title":"Peacock.as_to_bs","text":"as_to_bs(a1, a2)\n\nCalculate reciprocal lattice vectors, b1 and b2, from the real space lattice vectors, a1 and a2.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.bs_to_as-Tuple{Any,Any}","page":"Technical reference","title":"Peacock.bs_to_as","text":"bs_to_as(b1, b2)\n\nCalculate real space lattice vectors, a1 and a2, from reciprocal lattice vectors, b1 and b2.\n\nThis is actually the same as as_to_bs, but I think having both functions makes the intention of the code more obvious.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.convmat-Tuple{AbstractArray{T,2} where T,Peacock.PlaneWaveBasis}","page":"Technical reference","title":"Peacock.convmat","text":"convmat(mat::AbstractMatrix, basis::PlaneWaveBasis)\n\nGenerate convolution matrices, see Raymond Rumpf's CEM Lecture #18, \"Maxwell's Equations in Fourier Space\", for further reading.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.get_k-Tuple{BrillouinZoneCoordinate,Peacock.PlaneWaveBasis}","page":"Technical reference","title":"Peacock.get_k","text":"get_k(coord::BrillouinZoneCoordinate, basis::PlaneWaveBasis)\n\nReturn the k-space coordinate of the BrillouinZoneCoordinate in a particular PlaneWaveBasis.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.normalise-Tuple{Any}","page":"Technical reference","title":"Peacock.normalise","text":"normalise(data; weighting=I)\n\nNormalisation of vectors with a weighted inner product.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.orthonormalise-Tuple{Any}","page":"Technical reference","title":"Peacock.orthonormalise","text":"orthonormalise(data; weighting=I)\n\nGram-Schmidt orthonormalisation of vectors with a weighted inner product.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.overlaps-Tuple{HilbertSpace,HilbertSpace}","page":"Technical reference","title":"Peacock.overlaps","text":"overlaps(a::HilbertSpace, b::HilbertSpace)\n\nCalculate the overlaps between the basis vectors of each Hilbert space.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.plot_field-Tuple{AbstractArray{#s46,1} where #s46<:Complex,Peacock.PlaneWaveBasis}","page":"Technical reference","title":"Peacock.plot_field","text":"To do\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.plot_field-Tuple{Array{#s39,2} where #s39<:Complex,Array{#s38,1} where #s38<:Real,Array{#s37,1} where #s37<:Real}","page":"Technical reference","title":"Peacock.plot_field","text":"plot_field(field::Array{<:Real,2}, a1::Array{<:Real,1}, a2::Array{<:Real,1}; cmap=\"coolwarm\", vmin=nothing, vmax=nothing)\n\nPlot the complex-valued field on a unit cell with lattice vectors a1 and a2.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.plot_field-Tuple{Array{#s40,2} where #s40<:Real,Array{#s41,1} where #s41<:Real,Array{#s42,1} where #s42<:Real}","page":"Technical reference","title":"Peacock.plot_field","text":"plot_field(field::Array{<:Real,2}, a1::Array{<:Real,1}, a2::Array{<:Real,1}; cmap=\"coolwarm\", vmin=nothing, vmax=nothing)\n\nPlot the real-valued field on a unit cell with lattice vectors a1 and a2.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.sample_path-Tuple{Any}","page":"Technical reference","title":"Peacock.sample_path","text":"sample_path(ks; [labels=[]], [dk=nothing])\n\nReturn a path through ks where dk is the maximum distance between points.\n\nIf dk==nothing then there will be approximately 10 points between ks[1] and ks[2].\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.shift_k0-Tuple{HilbertSpace,Int64,Int64}","page":"Technical reference","title":"Peacock.shift_k0","text":"shift_k0(space::HilbertSpace, dp::Int, dq::Int)\n\nShift the basis of the Hilbert space by dp*b1 + dq*b2, where b1 and b2 are reciprocal lattice vectors.\n\nThis is required when we need the overlaps of modes that are at the same k-point but in different Brillouin zones.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.unitary_approx-Tuple{AbstractArray}","page":"Technical reference","title":"Peacock.unitary_approx","text":"unitary_approx(M::AbstractArray)\n\nCalculate the best unitary approxmation of M using singular value decomposition.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.unitary_overlaps-Tuple{HilbertSpace,HilbertSpace}","page":"Technical reference","title":"Peacock.unitary_overlaps","text":"unitary_overlaps(a::HilbertSpace, b::HilbertSpace)\n\nShortcut for unitary_approx(overlaps(a, b))\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.wilson_eigen-Tuple{AbstractArray{HilbertSpace,1}}","page":"Technical reference","title":"Peacock.wilson_eigen","text":"wilson_eigvals(spaces::AbstractArray{HilbertSpace,1}; closed=true)\n\nReturn the eigenvalues and eigenvectors of the Wilson matrix through a Hilbert space, sorted by the phase angle of the eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.wilson_eigvals-Tuple{AbstractArray{HilbertSpace,1}}","page":"Technical reference","title":"Peacock.wilson_eigvals","text":"wilson_eigvals(spaces::AbstractArray{HilbertSpace,1}; closed=true)\n\nReturn the eigenvalues of the Wilson matrix through a Hilbert space, sorted by phase angle.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.wilson_gauge-Tuple{AbstractArray{HilbertSpace,1}}","page":"Technical reference","title":"Peacock.wilson_gauge","text":"wilson_gauge(spaces::AbstractArray{HilbertSpace,1}; closed=true)\n\nReturn the eigenvalues, eigenvectors, and gauge of the Wilson loop through the Hilbert space, sorted by the phase angle of the eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Peacock.wilson_matrix-Tuple{Array{HilbertSpace,1}}","page":"Technical reference","title":"Peacock.wilson_matrix","text":"wilson_matrix(spaces::Array{HilbertSpace,1}; closed::Bool=true)\n\nCalculate the Wilson loop matrix through the Hilbert spaces.\n\nThe closed keyword \n\n\n\n\n\n","category":"method"},{"location":"how-tos/wilson_loops/#how_to_topology","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"","category":"section"},{"location":"how-tos/wilson_loops/#Background","page":"How to study band topology with Wilson loops","title":"Background","text":"","category":"section"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"Recently there has been a spike of interest in photonic crystals as a platform for topological photonics (see further reading). We provide methods to identify the topological phase of a photonic crystal using Wilson loops.","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"A winding in the Wilson loop spectrum can indicate a non-trivial topological phase, with the Chern number given by the winding. In this example we reproduce results that demonstrate the photonic crystal with 'fragile' band topology that was introduced in Blanco de Paz et al 2019.","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"This crystal can be loaded from the Zoo using make_dePaz_frag.","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"using Peacock, Peacock.Zoo, Parameters\n\n# Size of the plane-wave basis\nfourier_space_cutoff = 7\n\n# Load the fragile photonic topological insulator from Blanco de Paz et al 2018\n@unpack geometry, solver, polarisation = make_dePaz_frag(fourier_space_cutoff)\n\n# Visualise the geometry\nplot(geometry)","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"(Image: )","category":"page"},{"location":"how-tos/wilson_loops/#Plotting-the-Wilson-loop-winding","page":"How to study band topology with Wilson loops","title":"Plotting the Wilson loop winding","text":"","category":"section"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"First, let's define the k-path we want to scan along, labelling the high symmetry points using BrillouinZoneCoordinate.","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"# The Wilson loops are (by default) along b2, so we define a straight\n# path from Γ to Γ+b1 - we will scan along this path\nks = [\n    BrillouinZoneCoordinate(0.0, 0.0, \"Γ\"),\n    BrillouinZoneCoordinate(0.5, 0.0, \"M\"),\n    BrillouinZoneCoordinate(1.0, 0.0, \"Γ\")\n]","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"Now we can reproduce the Wilson loop winding figures of Blanco de Paz et al 2019 using plot_wilson_loop_winding.","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"# Wilson loop of all three valence bands\nfigure(figsize=(3,2))\nplot_wilson_loop_winding(solver, ks, polarisation, 1:3, dk=0.25)\ntitle(\"Bands 1-3\")\n\n# Wilson loop of just the second and third bands\nfigure(figsize=(3,2))\nplot_wilson_loop_winding(solver, ks, polarisation, 2:3, dk=0.25)\ntitle(\"Bands 2&3\")","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"(Image: Plot some Wilson loop examples)","category":"page"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"In the first figure, the Wilson loops through the Hilbert spaces of bands 2&3 wind with Chern numbers ±1, indicating some non-trivial topology. However, the second figure shows that including the (trivial) acoustic band in the Wilson loop calculation removes the topological winding, and consequently bands 2&3 are said to be 'fragilely topological'.","category":"page"},{"location":"how-tos/wilson_loops/#Further-reading","page":"How to study band topology with Wilson loops","title":"Further reading","text":"","category":"section"},{"location":"how-tos/wilson_loops/","page":"How to study band topology with Wilson loops","title":"How to study band topology with Wilson loops","text":"Wu, Long-Hua, and Xiao Hu. \"Scheme for achieving a topological photonic crystal by using dielectric material.\" Physical review letters 114.22 (2015): 223901.\nBlanco de Paz, María, et al. \"Engineering fragile topology in photonic crystals: Topological quantum chemistry of light.\" Physical Review Research 1.3 (2019): 032005.\nBlanco de Paz, María, et al. \"Tutorial: computing topological invariants in 2D photonic crystals.\" Advanced Quantum Technologies 3.2 (2020): 1900117.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Contributions are always greatly appreciated and credit will always be given.","category":"page"},{"location":"contributing/#Types-of-contributions","page":"Contributing","title":"Types of contributions","text":"","category":"section"},{"location":"contributing/#Bug-reports","page":"Contributing","title":"Bug reports","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Report bugs at the GitHub issues.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you are reporting a bug, please include:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Your operating system name and version.\nAny details about your local setup that might be helpful in troubleshooting.\nDetailed steps to reproduce the bug.","category":"page"},{"location":"contributing/#Bug-fixes","page":"Contributing","title":"Bug fixes","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","category":"page"},{"location":"contributing/#New-features","page":"Contributing","title":"New features","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","category":"page"},{"location":"contributing/#New-crystals","page":"Contributing","title":"New crystals","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you model a new crystal with Peacock.jl, please consider contributing it to the Peacock.Zoo submodule to help others reproduce your work.","category":"page"},{"location":"contributing/#Pull-request-guidelines","page":"Contributing","title":"Pull request guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Before you submit a pull request, check that it meets these guidelines:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The pull request should include tests.\nIf the pull request adds functionality, put your new functionality into a function with a docstring.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The docstrings will be automatically included in the technical reference.\nConsider also writing a tutorial or how-to guide for the new functionality.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The pull request should work for Julia 1.4. Check the test logs and make sure that the tests pass.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This page was adapted from the DetecTree library.","category":"page"},{"location":"how-tos/zoo/#how_to_zoo","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"","category":"section"},{"location":"how-tos/zoo/#Namespaces","page":"How to load a crystal from the Zoo","title":"Namespaces","text":"","category":"section"},{"location":"how-tos/zoo/","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"The Peacock.Zoo module contains functions to generate some of the photonic crystals that I have studied. To avoid polluting the global namespace, these functions are only accessible after calling using Peacock.Zoo, or by calling each function as Peacock.Zoo.name.","category":"page"},{"location":"how-tos/zoo/#Unpacking-parameters","page":"How to load a crystal from the Zoo","title":"Unpacking parameters","text":"","category":"section"},{"location":"how-tos/zoo/","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"Each make_* function returns a NamedTuple containing the geometry, solver, polarisation, and high symmetry k-points of the crystal. You can use the @unpack macro from the Parameters module to extract the variables held in the NamedTuple.","category":"page"},{"location":"how-tos/zoo/","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"For example, the topological photonic crystal first introduced by Wu et al 2015 can be generated using make_wu_topo.","category":"page"},{"location":"how-tos/zoo/","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"using Parameters  # for the `@unpack` macro\n\n# Load photonic topological insulator from Wu et al 2015\n@unpack geometry, solver, polarisation, G, K, M = make_wu_topo(fourier_space_cutoff)\n\n# Preview the crystal\nplot(geometry)","category":"page"},{"location":"how-tos/zoo/","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"(Image: )","category":"page"},{"location":"how-tos/zoo/#Available-crystals","page":"How to load a crystal from the Zoo","title":"Available crystals","text":"","category":"section"},{"location":"how-tos/zoo/","page":"How to load a crystal from the Zoo","title":"How to load a crystal from the Zoo","text":"Modules = [Peacock.Zoo]\nPrivate = false","category":"page"},{"location":"how-tos/zoo/#Peacock.Zoo.make_dePaz-Tuple{Real,Real,Int64}","page":"How to load a crystal from the Zoo","title":"Peacock.Zoo.make_dePaz","text":"make_dePaz(d1::Real, d2::Real, P::Int; R::Real=1/3)\n\nReproduces \"Engineering fragile topology in photonic crystals: Topological quantum chemistry of light\", Blanco de Paz et al, 2019\n\n\n\n\n\n","category":"method"},{"location":"how-tos/zoo/#Peacock.Zoo.make_wu-Tuple{Any,Any}","page":"How to load a crystal from the Zoo","title":"Peacock.Zoo.make_wu","text":"make_wu(a0_div_R, P)\n\nReproduces \"Scheme for Achieving a Topological Photonic Crystal by Using Dielectric Material\", Wu et al, 2015\n\n\n\n\n\n","category":"method"},{"location":"how-tos/zoo/#Peacock.Zoo.make_wu_primitive-Tuple{Any}","page":"How to load a crystal from the Zoo","title":"Peacock.Zoo.make_wu_primitive","text":"make_wu_primitive(P)\n\nReproduces the primitive unit cell of \"Scheme for Achieving a Topological Photonic Crystal by Using Dielectric Material\", Wu et al, 2015\n\n\n\n\n\n","category":"method"},{"location":"how-tos/zoo/#Peacock.Zoo.make_xu-Tuple{Any,Any,Any}","page":"How to load a crystal from the Zoo","title":"Peacock.Zoo.make_xu","text":"make_xu(r1, r2, P; wedges=[(0,360)])\n\nReproduces \"Accidental degeneracy in photonic bands and topological phase transitions in two-dimensional core-shell dielectric photonic crystals\", Xu et al, 2016.\n\nThe rings can be split into wedges = [(start,stop), (start,stop)...].\n\n\n\n\n\n","category":"method"},{"location":"how-tos/zoo/#Peacock.Zoo.make_zhu-Tuple{Any,Any,Any}","page":"How to load a crystal from the Zoo","title":"Peacock.Zoo.make_zhu","text":"make_zhu(r, l, P; angles=[60n for n in 0:5])\n\nReproduces \"Topological transitions in continuously deformed photonic crystals\" Zhu et al, 2018.\n\nr is the radius of the cylindrical air holes.\nl is the radius of the hexagonal ring that the air holes form\n\nNote that 'l' in Zhu et al is the same as 'R' in wu_ep.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/getting_started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"This tutorial will help you get started with Peacock.jl for the first time.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"We will install Peacock.jl, and then use it to study an example photonic crystal from a book (Joannopoulos et al 2008) by plotting the band structure and visualising the modes of the crystal.","category":"page"},{"location":"tutorials/getting_started/#getting_started_installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Before using Peacock.jl for the first time, you should install it using the built-in Julia package manager.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(\"Peacock\")","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"After installation, the Peacock.jl can be loaded in Julia.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"using Peacock","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"For this tutorial, we'll also install and load PyPlot to control our figures.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(\"PyPlot\")\nusing PyPlot","category":"page"},{"location":"tutorials/getting_started/#getting_started_geometry","page":"Getting started","title":"Defining the photonic crystal","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"In this section we will create a  Geometry that holds the shape, size, and materials of the crystal.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"The crystal we will reproduce in this tutorial is taken from chapter 5 of Joannopoulos et al 2008. It consists of dielectric cylinders (epsilon_mathrmcyl=89 mu_mathrmcyl=1) in air (epsilon_mathrmair=1 mu_mathrmair=1). The cylinders are arranged on a square lattice with separation a, and each cylinder has a radius of r=a5.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"First, let's define the functions epf(x,y) and muf(x,y), which return the permittivity and permeability of the unit cell at (xy), where (00) is the center of the unit cell. We will work in units of length where the separation between cylinders is unity, a=1, such the radius of each cylinder is 0.2.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"# Permittivity\nfunction epf(x,y)\n    # equation of a circle with radius 0.2a\n    if x^2+y^2 <= 0.2^2\n        # dielectric inside the circle\n        return 8.9\n    else\n        # air outside the circle\n        return 1\n    end\nend\n\n# Permeability is unity everywhere\nfunction muf(x,y)\n    return 1\nend","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Now we declare the lattice parameters. The cylinders are on a square lattice, so our lattice vectors are orthogonal and of equal length a.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"a1 = [1, 0]  # first lattice vector\na2 = [0, 1]  # second lattice vector","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"We must also give the resolution at which the geometry should be generated at.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"d1 = 0.01  # resolution along first lattice vector\nd2 = 0.01  # resolution along second lattice vector","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"A smaller value of d1 or d1 will result in a higher resolution grid.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Finally, we are ready to construct and visualise our Geometry.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"geometry = Geometry(epf, muf, a1, a2, d1, d2)\nplot(geometry)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"tutorials/getting_started/#Setting-up-the-solver","page":"Getting started","title":"Setting up the solver","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"In this section we will create a Solver that approximates the geometry using a truncated Plane Wave Expansion (see further reading). The number of plane waves is determined by the cutoff. Increasing the cutoff will increase the accuracy of the solution, but low-contrast photonic crystals can be well approximated with a relatively small basis of plane waves.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"fourier_space_cutoff = 7\nsolver = Solver(geometry, fourier_space_cutoff)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Plotting the Solver lets you visualise how the Geometry has been approximated.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"plot(solver)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"tutorials/getting_started/#getting_started_bands","page":"Getting started","title":"Plotting the band structure","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"When light passes through a photonic crystal, the frequency of the wave, omega, is related to its momentum, veck. It is common to plot the frequencies as a function of momentum, omega(veck), to produce a \"band diagram\" (see Joannopolous et al 2008).","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"First, we must define the corners of a path through the Brillouin zone. We can use BrillouinZoneCoordinate to attach a label to our coordinates, so that our band diagram plots nicely.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"G = BrillouinZoneCoordinate(  0,   0, \"Γ\")\nX = BrillouinZoneCoordinate(1/2,   0, \"X\")\nM = BrillouinZoneCoordinate(1/2, 1/2, \"M\")\nks = [G,X,M,G]","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Now we can call plot_band_diagram(solvers, ks, polarisation) to produce our diagram. If we provide the dk keyword argument, the path will be sampled so that the spacing between k-points is dk or smaller. The crystal behaves differently depending on the polarisation of light, so we plot the transverse electric (TE) polarised bands in red and the transverse magnetic (TM) polarised bands in blue.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"figure(figsize=(4,3))\nplot_band_diagram(solver, ks, TE, color=\"red\",\n            bands=1:4, dk=0.1, frequency_scale=1/2pi)\nplot_band_diagram(solver, ks, TM, color=\"blue\",\n            bands=1:4, dk=0.1, frequency_scale=1/2pi)\nylim(0,0.8)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"This reproduces figure 2 of chapter 5 of Joannopoulos et al 2008.","category":"page"},{"location":"tutorials/getting_started/#getting_started_modes","page":"Getting started","title":"Plotting a mode","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Often it is useful to visualise the electric and magnetic fields in the crystal. Here we show how to solve and plot the modes of a photonic crystal at a particular k-point.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"First, we call solve, which returns an array of Modes.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"modes = solve(solver, X, TM)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"A Mode can be visualised using plot(mode). By default the full Bloch wave is plotted - set bloch_phase=false to plot the cell-periodic part of Bloch mode.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"plot(modes[2], bloch_phase=true)\nplot(modes[2], bloch_phase=false)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"The out of plane field component is plotted - for TE and TM polarisations this will be the magnetic and electric fields, respectively. The titles of the figures are set automatically using the label of the Mode.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"This reproduces figure 3 of chapter 5 of Joannopoulos et al 2008. Note that Peacock.jl doesn't fix the phase of the solutions and your results may differ by a random phase.","category":"page"},{"location":"tutorials/getting_started/#Further-reading","page":"Getting started","title":"Further reading","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Plane Wave Expansion Method","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Rumpf, Raymond. \"Design and optimization of nano-optical elements by coupling fabrication to optical behavior.\" (2006)\nRumpf, Raymond. \"Computational Electromagnetics lecture course.\" Available online.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Photonic crystals","category":"page"},{"location":"tutorials/getting_started/","page":"Getting started","title":"Getting started","text":"Joannopoulos, John D., et al. \"Photonic crystals: molding the flow of light. 2008.\" Princeton Univ Press. Available online.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: )","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#Background","page":"Introduction","title":"Background","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Peacock.jl - or the Plane-wave Expansion Approach to Characterising Optical Crystals in k-space - is a Julia package for studying photonic crystals using the Plane Wave Expansion Method.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Photonic crystals are materials whose optical properties arise from the structuring of the material when the size of the structures are comparable to the wavelengths of light. Peacock.jl is named for the irridescent colours of peacock feathers which arise not from pigmentation but from their photonic crystal structure, as shown below.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Different zooms of a Peacock) Peacock by allanlau2000 from pixabay. Feather by suju from pixabay. Electron microscope image of photonic crystal structure from Zi, Jian, et al. \"Coloration strategies in peacock feathers.\",  Proceedings of the National Academy of Sciences 100.22 (2003): 12576-12578. Copyright (2003) National Academy of Sciences.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As well as occuring naturally as in animals such as peacocks, advances in nanofabrication mean that 'designer' photonic crystals can now be manufactured for unprecedented control over the flow of light, with applications ranging from optical fibers to photonic circuitry. Photonic crystals are also a promising platform for more exotic materials like topological insulators.","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Solve for...","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Transverse electric (TE) and transverse magnetic (TM) modes of 2D photonic crystals\nNon-orthogonal unit cells\nInhomogeneous permittivity and/or permeability\nChern numbers of topological photonic crystals using built-in Wilson loop methods","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Focused on ease of use","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Install with one line in Julia's package manager\nSimple visualisation of geometry, fields, and fully labelled band diagrams\nReproduce and extend existing photonic crystals in the Peacock.Zoo submodule","category":"page"},{"location":"#Limitations","page":"Introduction","title":"Limitations","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Currently only implemented for 2D photonic crystals\nLike all methods that solve Maxwell's equations in Fourier space, the Plane Wave Expansion Method converges slowly for high contrast materials such as metals (epsilon  0)","category":"page"}]
}
